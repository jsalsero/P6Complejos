//OPERACIONES BÁSICAS
var1 = 1 + 1 i ; var2 = 1  - 1 i ; 
Imprimir [ 1 ] ; 
Imprimir [ 1 - 8 ] ; 
Imprimir [ 1 i ] ; 
Imprimir [ var1 + var2 ] ; 
Imprimir [ var1 - var2 ] ; 
Imprimir [ var1 * var2 ] ; 

//CICLOS
var1 = 0 ; 
var2 = 4 i ; 
while ( | var1 | == | var2 | ) { Imprimir [ var1 ] ; var1 = var1 + 1 i ; } Imprimir [ var1 ] ; Imprimir [ var2 ] ; 

//CONDICIONES
var1 = 5 ;
if ( | 2 | < | 3 | ) { Imprimir [ 3 ] ; }
if ( | var1 | != | 34 | ) { Imprimir [ 66 ] ; }
while ( | var1 | == | 5 | ) { Imprimir [ var1 ] ; var1 = var1 + 1 ; }
if ( | 3 | < | 4 | ) { Imprimir [ 34 ] ; }
if ( | 4 | < | 1 | ) { Imprimir [ 23 ] ; }

//CICLO FINITO
var1 = 4 + 2 i ; 
var2 = var1 ; 
Imprimir [ var1 ] ; 
while ( ( Mag [ var1 ] <= 20 ) ) { var1 = var1 + var2 ; Imprimir [ var1 ] ; } 

//COMPARACIONES
if ( 4 < 5 ) { Imprimir [ var3 = 2 + 3 + 4 i  + 7 i ] ; } 
if ( 5 > 4 ) { Imprimir [ var3 [ 2 ] = { 1 , 2 | 3 , 4 } ] ; } 
if ( 4 <= 5 ) { Imprimir [ var3 [ 2 ] = { 1 , 2 | 3 , 4 } ] ; } 
if ( 5 >= 4 ) { Imprimir [ var3 [ 2 ] = { 1 , 2 | 3 , 4 } ] ; } 

//IF-ELSE ANIDADO
var4 = 4 ; if ( 5 > 4 ) { if ( 2 > 3 ) { Imprimir [ 5 ] ;  Imprimir [ 100 ] ; } else { Imprimir [ 4 ] ; Imprimir [ 200 ] ; } Imprimir [ 300 ] ; } Imprimir [ 400 ] ; 


//WHILE's ANIDADOS
i = 0 ; while ( i < 5 ) { j = 0 ; while ( j < 5 ) { Imprimir [ i + 10 ] ; Imprimir [ j + 20 ] ; j = j + 1 ; } i = i + 1 ; } 

//IF's ANIDADOS
if ( 5 == 5 ) { if ( 3 >= 2 ) { Imprimir [ 15 ] ; } Imprimir [ 30 ] ; }

//FOR BÁSICO
for ( j = 0 ; | j | < | 10 | ; j = j + 1 ) { Imprimir [ j ] ; }

for ( i = 0 ; i < 5 ; i = i + 1 ) { Imprimir [ i ] ; }
i = 0 ; for ( ; i < 5 ;  ) { Imprimir [ i ] ; i = i + 1 ; }

//OTRO EJEMPLO DE FOR
for ( var1 [ 2 ] = { 1 , 2 | 3 , 4 } , var2 [ 2 ] = { 100 , 100 | 100 , 100 } ; var1 <= var2 ; var1 = var1 + var1 ) { Imprimir [ var1 ] ; } Imprimir [ var1 ] ;
for ( i = 0 ; i < 5 ; i = i + 1 ) { for ( j = 0 ; j < 5 ; j = j + 1 ) { Imprimir [ ( i * 5 ) + j ] ; } Imprimir [ 100 ] ; }

//FUNCIONES
func miFuncion ( ) { return 5 ; }
var1 = miFuncion ( ) * 2 ; Imprimir [ var1 ] ;


//FUNCIONES CON PARAMETROS
func miSuma ( ) { return ( $1 + $2 ) ; } 
Imprimir [ 1 + miSuma ( 5 , 3 + 1 ) ] ;

//PROCEDIMIENTO fibonacci
proc fib ( ) { a = 0 ; b = 1 ;  while ( | b | < | $1 | ) { Imprimir [ b ] ; c = b ; b = a + b ; a = c ;  } }

//FUNCIONES ANIDADAS
func miFuncion ( ) { return 3 ; }
func miFuncion2 ( ) { return ( miFuncion ( ) + 2 ) ; }
Imprimir [ miFuncion2 ( ) + 3 ] ;

//FUNCION factorial
func miFuncion ( ) { return 3 ; }
func fac ( ) { if ( $1 <= 0 ) { return 1 ; }  else { return ( fac ( -1 + $1 ) * $1 ) ; } }
Imprimir [ fac ( 2 + miFuncion ( ) ) ] ;

Compilar y ejecutar:
byaccj -J P2.y
javac *.java -nowarn
java Parser